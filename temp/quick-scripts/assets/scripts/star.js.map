{"version":3,"sources":["star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","start","update","dt","opacityRatio","game","timer","starDuration","minOpacity","node","opacity","Math","floor","getPlayerDistance","onPicked","playerPos","player","getPosition","dist","sub","mag","spawnNewStar","gainScore","destroy"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACPC,WAASF,GAAGG,SADL;;AAGPC,cAAY;AACV;AACAC,gBAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBU,GAHL;;AAuBP;;AAEA;;AAEAC,OA3BO,mBA2BC,CAAE,CA3BH;AA6BPC,QA7BO,kBA6BAC,EA7BA,EA6BI;AACT;AACA,QAAIC,eAAe,IAAI,KAAKC,IAAL,CAAUC,KAAV,GAAkB,KAAKD,IAAL,CAAUE,YAAnD;AACA,QAAIC,aAAa,EAAjB;AACA,SAAKC,IAAL,CAAUC,OAAV,GACEF,aAAaG,KAAKC,KAAL,CAAWR,gBAAgB,MAAMI,UAAtB,CAAX,CADf;;AAGA;AACA,QAAI,KAAKK,iBAAL,KAA2B,KAAKb,UAApC,EAAgD;AAC9C;AACA,WAAKc,QAAL;AACA;AACD;AACF,GA1CM;AA4CPD,mBA5CO,+BA4Ca;AAClB;AACA,QAAIE,YAAY,KAAKV,IAAL,CAAUW,MAAV,CAAiBC,WAAjB,EAAhB;AACA;AACA,QAAIC,OAAO,KAAKT,IAAL,CACRQ,WADQ,GAERE,GAFQ,CAEJJ,SAFI,EAGRK,GAHQ,EAAX;;AAKA,WAAOF,IAAP;AACD,GAtDM;AAwDPJ,UAxDO,sBAwDI;AACT;AACA,SAAKT,IAAL,CAAUgB,YAAV;AACA;AACA,SAAKhB,IAAL,CAAUiB,SAAV;;AAEA;AACA,SAAKb,IAAL,CAAUc,OAAV;AACD;AAhEM,CAAT","file":"star.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    // 星星和主角之间的距离小于这个数值时，就会完成收集\n    pickRadius: 0\n    // foo: {\n    //     // ATTRIBUTES:\n    //     default: null,        // The default value will be used only when the component attaching\n    //                           // to a node for the first time\n    //     type: cc.SpriteFrame, // optional, default is typeof default\n    //     serializable: true,   // optional, default is true\n    // },\n    // bar: {\n    //     get () {\n    //         return this._bar;\n    //     },\n    //     set (value) {\n    //         this._bar = value;\n    //     }\n    // },\n  },\n\n  // LIFE-CYCLE CALLBACKS:\n\n  // onLoad () {},\n\n  start() {},\n\n  update(dt) {\n    // 根据 Game 脚本中的计时器更新星星的透明度\n    var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n    var minOpacity = 50;\n    this.node.opacity =\n      minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n\n    // 每帧判断和主角之间的距离是否小于收集距离\n    if (this.getPlayerDistance() < this.pickRadius) {\n      // 调用收集行为\n      this.onPicked();\n      return;\n    }\n  },\n\n  getPlayerDistance() {\n    // 根据 player 节点位置判断距离\n    var playerPos = this.game.player.getPosition();\n    // 根据两点位置计算两点之间距离\n    var dist = this.node\n      .getPosition()\n      .sub(playerPos)\n      .mag();\n\n    return dist;\n  },\n\n  onPicked() {\n    // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n    this.game.spawnNewStar();\n    // 调用 Game 脚本的得分方法\n    this.game.gainScore();\n\n    // 然后销毁当前星星节点\n    this.node.destroy();\n  }\n});\n"]}